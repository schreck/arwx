using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class playercontroller : MonoBehaviour {

    private Quaternion initRot;
    private LocationInfo loc;
    private string loc_status;
    public radar_plain r_prefab;
    private Dictionary<string,bool> Show;
    private string master_status;
    private Dictionary<string,radar_plain> rads;
    private float anim__time_speed; // s/s
    private float anim__look_back; // s

    IEnumerator check_location()
    {
        // First, check if user has location service enabled
        if (!Input.location.isEnabledByUser)
            yield break;

        // Start service before querying location
        Input.location.Start();

        // Wait until service initializes
        int maxWait = 20;
        while (Input.location.status == LocationServiceStatus.Initializing && maxWait > 0)
        {
            yield return new WaitForSeconds(1);
            maxWait--;
        }

        // Service didn't initialize in 20 seconds
        if (maxWait < 1)
        {
            loc_status = "timeout";
            yield break;
        }

        // Connection has failed
        if (Input.location.status == LocationServiceStatus.Failed)
        {
            loc_status = "failed";
        }
        else
        {
            // Access granted and location value could be retrieved
            loc_status = "found";
            loc = Input.location.lastData;
            var sl = ListNearestStations(loc);
            foreach (string station in sl)
            {
                if (!rads.ContainsKey(station)){ 
                    rads.Add(station, Instantiate<radar_plain>(r_prefab));
                }
                rads[station].LoadRadarData(station);
                rads[station].SetGps(loc);
            }
        }

        // Stop service if there is no need to query location updates continuously
        Input.location.Stop();
    }

    private static Quaternion GetGyro()
    {
        if (Input.gyro.enabled)
        {
            return new Quaternion(Input.gyro.attitude.x, Input.gyro.attitude.y, Input.gyro.attitude.z, Input.gyro.attitude.w);
        } else
        { // personal computer gyro mock init
            Quaternion a = Quaternion.Euler(355f, 274f, 270f);
            return a;
        }
    }

    public List<string> ListNearestStations(Vector2 x)
    {
        int w = 600, h = 550;
        var names = new string[] { "ABC", "ABR", "ABX", "ACG", "AEC", "AHG", "AIH", "AKC", "AKQ", "AMA", "AMX", "APD", "APX", "ARX", "ATX", "BBX", "BGM", "BHX", "BIS", "BLX", "BMX", "BOX", "BRO", "BUF", "BYX", "CAE", "CBW", "CBX", "CCX", "CLE", "CLX", "CRP", "CXX", "CYS", "DAX", "DDC", "DFX", "DGX", "DIX", "DLH", "DMX", "DOX", "DTX", "DVN", "DYX", "EAX", "EMX", "ENX", "EOX", "EPZ", "ESX", "EVX", "EWX", "EYX", "FCX", "FDR", "FDX", "FFC", "FSD", "FSX", "FTG", "FWS", "GGW", "GJX", "GLD", "GRB", "GRK", "GRR", "GSP", "GUA", "GWX", "GYX", "HDX", "HGX", "HKI", "HKM", "HMO", "HNX", "HOU", "HPX", "HTX", "HWA", "ICT", "ICX", "ILN", "ILX", "IND", "INX", "IWA", "IWX", "JAX", "JGX", "JKL", "JUA", "LBB", "LCH", "LIX", "LNX", "LOT", "LRX", "LSX", "LTX", "LVX", "LWX", "LZK", "MAF", "MAX", "MBX", "MHX", "MKX", "MLB", "MOB", "MPX", "MQT", "MRX", "MSX", "MTX", "MUX", "MVX", "MXX", "NKX", "NQA", "OAX", "OHX", "OKX", "OTX", "PAH", "PBZ", "PDT", "POE", "PUX", "RAX", "RGX", "RIW", "RLX", "RTX", "SFX", "SGF", "SHV", "SJT", "SOX", "SRX", "TBW", "TFX", "TLH", "TLX", "TWX", "TYX", "UDX", "UEX", "VAX", "VBX", "VNX", "VTX", "VWX", "YUX" };
        var x_scale = new float[] { 0.0147268399325284f, 0.010253212668679f, 0.00879794034090911f, 0.0131468616832386f, 0.0166918390447443f, 0.0146962113813921f, 0.0141447864879261f, 0.0138271262428977f, 0.00900523792613635f, 0.00880692915482953f, 0.00797815496271307f, 0.0170176558061079f, 0.0101549460671165f, 0.00996903852982953f, 0.0107884909889915f, 0.00932112260298297f, 0.00970952814275568f, 0.00945928400213068f, 0.0105004327947443f, 0.0103262051669034f, 0.00859441583806818f, 0.00967215798117896f, 0.0079986572265625f, 0.00982652143998578f, 0.00791232022372161f, 0.00867198597301136f, 0.0103606900301846f, 0.0099141346324574f, 0.00951962557705964f, 0.00959098122336646f, 0.00854442249644886f, 0.00813165838068182f, 0.0100858098810369f, 0.00955275102095172f, 0.00919150612571021f, 0.00909889914772729f, 0.0082472645152699f, 0.00850893887606536f, 0.00938260165127839f, 0.0105132779208096f, 0.00963825572620739f, 0.00923325972123578f, 0.00978707053444604f, 0.00962047230113636f, 0.00853326970880682f, 0.00923120672052557f, 0.00847312233664771f, 0.00976917613636365f, 0.00843364368785511f, 0.00847118030894885f, 0.00885825417258521f, 0.00835479736328125f, 0.00828238747336646f, 0.00879233620383521f, 0.00900998202237214f, 0.00871446089311078f, 0.00874300870028411f, 0.00861319802024146f, 0.00993008700284089f, 0.00873660000887786f, 0.00936062899502839f, 0.00853659889914771f, 0.0107907936789773f, 0.00926402698863635f, 0.00930417147549714f, 0.0100835626775568f, 0.00836844704367896f, 0.00981775457208807f, 0.00876928156072443f, 0.00739768288352271f, 0.00866671475497161f, 0.00998038552024146f, 0.00858503861860797f, 0.00826338334517047f, 0.00775385076349428f, 0.00766257546164771f, 0.00771340110085229f, 0.00892733487215911f, 0.003183665990938162f, 0.00897621848366479f, 0.0087744140625f, 0.00761363636363636f, 0.00908580433238636f, 0.00907809170809661f, 0.00931135697798297f, 0.00941070556640625f, 0.00935005881569604f, 0.00891149347478693f, 0.00860590154474432f, 0.00958301890980114f, 0.00834791703657672f, 0.00854630903764203f, 0.00907809170809661f, 0.00756992686878552f, 0.00864218971946021f, 0.0083174549449574f, 0.0083353770862926f, 0.00967246315696021f, 0.00961927934126422f, 0.009493408203125f, 0.00921686345880682f, 0.00867606423117896f, 0.00912533846768464f, 0.00925265225497161f, 0.00876428777521307f, 0.00847761674360797f, 0.009691162109375f, 0.0108303278142756f, 0.00875790682705964f, 0.00982954545454547f, 0.00815646084872161f, 0.00836472944779828f, 0.010144736550071f, 0.0104539905894886f, 0.00891068892045453f, 0.0105533669211648f, 0.00956895308061078f, 0.00902554598721589f, 0.010650801225142f, 0.00853318647904828f, 0.00856977982954547f, 0.00881910844282672f, 0.00957730379971589f, 0.008919677734375f, 0.00951144131747161f, 0.0106819568980824f, 0.00901519775390625f, 0.00946377840909089f, 0.0102961314808239f, 0.00840639981356536f, 0.00918615167791193f, 0.00885428688742896f, 0.00935630104758521f, 0.00984522039240057f, 0.00916739723899146f, 0.0103005426580256f, 0.00985165682705964f, 0.00903511740944604f, 0.00852502996271307f, 0.00842565363103693f, 0.00865869695490057f, 0.00881322687322443f, 0.00812577681107953f, 0.010637040571733f, 0.00834056507457386f, 0.00881780450994318f, 0.00925550981001422f, 0.0099578857421875f, 0.0100197809392756f, 0.00943431507457385f, 0.00838306773792614f, 0.00876450972123578f, 0.00897669011896307f, 0.0087196766246449f, 0.00916098854758521f, 0.00852919145063922f };
        var a = new float[] { 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.00000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f };
        var b = new float[] { 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.00000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f };
        var y_scale = new float[] { -0.0147268399325284f, -0.010253212668679f, -0.00879794034090911f, -0.0131468616832386f, -0.0166918390447443f, -0.0146962113813921f, -0.0141447864879261f, -0.0138271262428977f, -0.00900523792613635f, -0.00880692915482953f, -0.00797815496271307f, -0.0170176558061079f, -0.0101549460671165f, -0.00996903852982953f, -0.0107884909889915f, -0.00932112260298297f, -0.00970952814275568f, -0.00945928400213068f, -0.0105004327947443f, -0.0103262051669034f, -0.00859441583806818f, -0.00967215798117896f, -0.0079986572265625f, -0.00982652143998578f, -0.00791232022372161f, -0.00867198597301136f, -0.0103606900301846f, -0.0099141346324574f, -0.00951962557705964f, -0.00959098122336646f, -0.00854442249644886f, -0.00813165838068182f, -0.0100858098810369f, -0.00955275102095172f, -0.00919150612571021f, -0.00909889914772729f, -0.0082472645152699f, -0.00850893887606536f, -0.00938260165127839f, -0.0105132779208096f, -0.00963825572620739f, -0.00923325972123578f, -0.00978707053444604f, -0.00962047230113636f, -0.00853326970880682f, -0.00923120672052557f, -0.00847312233664771f, -0.00976917613636365f, -0.00843364368785511f, -0.00847118030894885f, -0.00885825417258521f, -0.00835479736328125f, -0.00828238747336646f, -0.00879233620383521f, -0.00900998202237214f, -0.00871446089311078f, -0.00874300870028411f, -0.00861319802024146f, -0.00993008700284089f, -0.00873660000887786f, -0.00936062899502839f, -0.00853659889914771f, -0.0107907936789773f, -0.00926402698863635f, -0.00930417147549714f, -0.0100835626775568f, -0.00836844704367896f, -0.00981775457208807f, -0.00876928156072443f, -0.00739768288352271f, -0.00866671475497161f, -0.00998038552024146f, -0.00858503861860797f, -0.00826338334517047f, -0.00775385076349428f, -0.00766257546164771f, -0.00771340110085229f, -0.00892733487215911f, -0.002784685360144482f, -0.00897621848366479f, -0.0087744140625f, -0.00761363636363636f, -0.00908580433238636f, -0.00907809170809661f, -0.00931135697798297f, -0.00941070556640625f, -0.00935005881569604f, -0.00891149347478693f, -0.00860590154474432f, -0.00958301890980114f, -0.00834791703657672f, -0.00854630903764203f, -0.00907809170809661f, -0.00756992686878552f, -0.00864218971946021f, -0.0083174549449574f, -0.0083353770862926f, -0.00967246315696021f, -0.00961927934126422f, -0.009493408203125f, -0.00921686345880682f, -0.00867606423117896f, -0.00912533846768464f, -0.00925265225497161f, -0.00876428777521307f, -0.00847761674360797f, -0.009691162109375f, -0.0108303278142756f, -0.00875790682705964f, -0.00982954545454547f, -0.00815646084872161f, -0.00836472944779828f, -0.010144736550071f, -0.0104539905894886f, -0.00891068892045453f, -0.0105533669211648f, -0.00956895308061078f, -0.00902554598721589f, -0.010650801225142f, -0.00853318647904828f, -0.00856977982954547f, -0.00881910844282672f, -0.00957730379971589f, -0.008919677734375f, -0.00951144131747161f, -0.0106819568980824f, -0.00901519775390625f, -0.00946377840909089f, -0.0102961314808239f, -0.00840639981356536f, -0.00918615167791193f, -0.00885428688742896f, -0.00935630104758521f, -0.00984522039240057f, -0.00916739723899146f, -0.0103005426580256f, -0.00985165682705964f, -0.00903511740944604f, -0.00852502996271307f, -0.00842565363103693f, -0.00865869695490057f, -0.00881322687322443f, -0.00812577681107953f, -0.010637040571733f, -0.00834056507457386f, -0.00881780450994318f, -0.00925550981001422f, -0.0099578857421875f, -0.0100197809392756f, -0.00943431507457385f, -0.00838306773792614f, -0.00876450972123578f, -0.00897669011896307f, -0.0087196766246449f, -0.00916098854758521f, -0.00852919145063922f };
        var lon = new float[] { -166.284681479714f, -101.48383920843f, -109.457981178977f, -139.46548495206f, -170.292205061479f, -155.750514332164f, -150.537358426181f, -160.768223211115f, -79.7050719937411f, -104.346674915661f, -82.8024594254927f, -152.595780833851f, -87.7614075678045f, -94.1767289317738f, -125.725156347101f, -124.399677928578f, -78.8930042891069f, -127.124055924849f, -103.904881758256f, -111.698701255105f, -89.3440241865678f, -74.0348118036443f, -99.8145965576172f, -81.6800426829945f, -84.0727428366921f, -83.7162630948153f, -70.9100258705833f, -119.203284482089f, -80.8551256630637f, -84.7324994867498f, -83.601054354581f, -99.9464332719283f, -76.1867004255815f, -107.667048686634f, -124.429858037775f, -102.69312261408f, -102.75005450162f, -92.5324283530495f, -77.2210923073508f, -95.3587258217551f, -96.609657162753f, -78.2053637279164f, -86.4032277471369f, -93.4623327359286f, -101.809712080522f, -97.0287463517623f, -113.167697393244f, -76.9898712435636f, -87.9848759183017f, -109.235116549405f, -117.544045965021f, -88.4232594299316f, -100.508574926203f, -120.193302251642f, -82.9724916908958f, -101.585978962291f, -106.247528908469f, -87.1456546991522f, -99.7030573342063f, -113.81361029885f, -107.348506552956f, -99.8597127741033f, -109.85584325617f, -110.98757351962f, -104.486596305154f, -91.1310270829634f, -99.8893531244451f, -88.4854156632857f, -84.8464010481401f, 142.595398615057f, -90.9246834494851f, -73.246129247492f, -108.693220714222f, -97.5538856922497f, -161.877270979448f, -158.075947210138f, -159.493162286932f, -122.304733498313f, -96.19709979728147f, -89.973381097967f, -88.7119366455078f, -157.852290316495f, -100.164199191007f, -115.57988852761f, -86.6107500110973f, -92.1555043029785f, -89.0803413945978f, -98.2329952864213f, -114.246466230913f, -88.5701111117276f, -84.2022046314586f, -85.9106174815785f, -86.031892006614f, -68.3461954775724f, -104.402338811701f, -95.7070811739835f, -92.3214423855868f, -103.472899114435f, -90.9659732471813f, -119.645277709961f, -93.4434492631392f, -81.0274820917303f, -88.6770391152122f, -80.2491661765359f, -94.886905226274f, -104.728049205433f, -125.618506469727f, -104.107681593461f, -79.4989925453879f, -91.4949513660778f, -83.0968593528054f, -90.7452343333851f, -96.6033510381525f, -90.6789667025479f, -86.0707517589222f, -117.14573400324f, -115.312900043834f, -124.600154196999f, -100.514911915172f, -88.3456902660023f, -119.60764942516f, -92.5143240772594f, -99.234399802468f, -89.2344470214844f, -75.7126750876687f, -120.825245541659f, -91.472054901123f, -83.0524039528587f, -121.935688753995f, -95.4937146689675f, -106.932252183394f, -81.1418567865545f, -122.263210698908f, -111.425640883012f, -84.4686350458318f, -126.049009413286f, -115.635568778298f, -96.106019190008f, -96.3942498918013f, -103.015480027632f, -120.229281324907f, -97.0015609602495f, -84.8356705821644f, -114.569796336781f, -86.827001620206f, -99.9189323286577f, -99.0040274464f, -78.6623870849609f, -105.829926771684f, -101.267578707608f, -85.5127276888761f, -123.020974384655f, -100.81651704268f, -121.790544003573f, -90.4677150934393f, -117.210491069447f };
        var lat = new float[] { 64.8355168290572f, 48.2705081592907f, 37.5650361494585f, 60.4618141729181f, 69.09391085538f, 64.7601117636941f, 63.3447456914728f, 62.4755464588512f, 39.4559389703924f, 37.6505037619851f, 27.8010035982999f, 69.7073496315696f, 47.6945341907848f, 46.5595029380105f, 51.1564404713024f, 42.0516481850364f, 44.8662656888095f, 43.0955740079013f, 49.6533687106046f, 48.6885434098677f, 35.5311680325595f, 44.6110086475719f, 28.1116317749023f, 45.646381447532f, 26.7689320234819f, 36.3294614618475f, 48.8830108781294f, 46.2124310857599f, 43.5361375565962f, 44.045722545277f, 35.0004427545721f, 30.0161406222257f, 47.2795563992587f, 43.7742305824973f, 41.024067882191f, 40.2586494029652f, 31.5368748266047f, 34.6157025007768f, 42.5225227494673f, 49.7228965897994f, 44.3767001897639f, 41.3605300071023f, 45.3865516246449f, 44.2528191583807f, 34.8803807345304f, 41.3439676180753f, 34.2198711811412f, 45.2676373845881f, 33.7750342767889f, 34.1983381860906f, 38.1325909839977f, 32.8573910522461f, 31.9775158344616f, 37.5114958607067f, 39.4972383256392f, 36.7541190268777f, 37.0349542097612f, 35.7273218189586f, 46.3138101335005f, 36.9721980146928f, 42.355491957231f, 34.9162982593883f, 51.1680741466175f, 41.6049756830389f, 41.9199961991744f, 47.2659390536222f, 33.0191388355602f, 45.5889746371183f, 37.2901672085849f, 15.4836640201915f, 36.2760125593706f, 46.6306146656383f, 35.4325933144309f, 31.7402988503196f, 24.0254313937101f, 22.2323766743053f, 23.2533282817494f, 38.7645525984331f, 30.28174434157319f, 39.2009714854847f, 37.3395764160156f, 21.1879427545721f, 40.1480526178533f, 40.082935777144f, 41.9759656594016f, 42.734239654541f, 42.274591328014f, 38.6212041958896f, 35.6513214388761f, 43.9895398504084f, 32.7755024788596f, 35.0209610678933f, 40.082935777144f, 20.1959449559992f, 36.0262804066051f, 32.4081413823908f, 32.6250609033758f, 44.6130913196911f, 44.2444922707298f, 43.3459422302246f, 41.2290303316983f, 36.3705780445446f, 40.4799038835005f, 41.5148515181108f, 37.2417955294522f, 34.2701065895774f, 44.7412252807617f, 51.3659265414151f, 37.1800464005904f, 45.6662087319114f, 30.3519493727251f, 32.9751190879128f, 47.633729206432f, 49.4006186467951f, 38.6139833762429f, 49.9378995860707f, 43.8896781089089f, 39.6325111527876f, 50.4516448142312f, 34.8793584372781f, 35.2714032814719f, 37.7658464882591f, 43.9489695878462f, 38.6954531860352f, 43.4768917707963f, 50.613196924383f, 39.5426725769043f, 43.1288054032759f, 48.517289983576f, 33.4625574354692f, 40.9805982693759f, 38.0955026661266f, 42.3223062549938f, 45.7685148898038f, 40.8274513660778f, 48.5424991122159f, 45.8102787919478f, 39.7151403392445f, 34.7911209383878f, 33.6838422116366f, 36.1948131075772f, 37.710231142911f, 29.9355256583474f, 50.3798667214134f, 32.6874858301336f, 37.7534875210849f, 41.5376390907981f, 46.4894401550293f, 46.8754298678311f, 42.9107186334783f, 33.1911514837092f, 37.2438591696999f, 39.2051025668058f, 36.8055499822443f, 40.7746896778453f, 34.8362619850852f };

        List<string> stations = new List<string>();
        for (int i = 0; i < names.Length; i++)
        {
            if (lon[i] < x.x) // to the right of left
            {
                if (x.x < (lon[i] + w * x_scale[i])) // to the left of right
                {
                    if (lat[i] > x.y) // under top
                    {
                        if (x.y > (lat[i] + h * y_scale[i])) // over bottom
                        {
                            stations.Add(names[i]);
                        }
                    }
                }
            }
        }
        return stations;
    }

    public List<string> ListNearestStations(LocationInfo x)
    {
        return ListNearestStations(new Vector2(x.longitude, x.latitude));
    }

    // location mocks for personal computing
    private string[] MockLocs = new string[] { "Crown Heights", "Utica", "Portsmouth", "Delaware" };
    private int MockLoc_i = 0;
    public Vector2 MockLoc(string place)
    {
        var gps = new Vector2();
        if (place == "Crown Heights")
        {
            gps.x = -73.925f;
            gps.y = 40.662f;
        }
        else if (place == "Utica")
        {
            gps.x = -75.7f;
            gps.y = 43.4f;
        }
        else if (place == "Delaware")
        {
            gps.x = -75.7f;
            gps.y = 38.2f;
        }
        else if (place == "Portsmouth")
        {
            gps.x = -70.16f;
            gps.y = 43.4f;
        }
        else // Erie
        {
            gps.x = -80.087168f;
            gps.y = 42.131154f;
        }
        return gps;
    }

    private void reload_button()
    {
        StartCoroutine(check_location());
    }

    private void setup_ui()
    {
        Button btn = GetComponentInChildren<Button>();
        btn.onClick.AddListener(reload_button);
        Toggle tgl = GetComponentInChildren<Toggle>();
    }

    // Use this for initialization
    void Start()
    {
        master_status = "init";
        anim__look_back = 60f * 15f * 15f; // look back 15 x 15 minutes
        anim__time_speed = 15f * 60f / 0.033f; // 15 min / 33 ms / s
        if (SystemInfo.supportsGyroscope)
        {
            Input.gyro.enabled = true;
        }
        else
        {
            Input.gyro.enabled = false;
        }
        Input.compass.enabled = true;
        initRot = new Quaternion(0, 0, 1, 0);
        loc_status = "looking";
        // find yourself
        StartCoroutine(check_location());
        // radars dictionary
        rads = new Dictionary<string, radar_plain>();
        // status control
        Show = new Dictionary<string, bool>();
        Show.Add("gyro",false);
        Show.Add("compass",false);
        Show.Add("gps",true);
        Show.Add("master",true);
        Show.Add("rads", true);
        master_status = "loaded";
        // setup UI
        setup_ui();
#if UNITY_EDITOR
        Debug.Log(MockLoc("Utica"));
#endif
    }

    // Update is called once per frame
    void Update () {

        // xform gyro
        transform.localRotation = (Quaternion.Euler(90f,90f,-90f))*GetGyro()*initRot;
        
        // status display
        string status_txt = "<i>STATUS</i>:"+master_status;
        if (Show["gyro"]) 
            status_txt += "\n<b>gyro:</b>" + "\neuler: " + GetGyro().eulerAngles;
        if (Show["compass"])
            status_txt += "\n<b>compass:</b>" + Input.compass.magneticHeading.ToString(); // + "\ntrue: " + Input.compass.trueHeading.ToString();
        if(Show["gps"])
            status_txt += "\n<b>gps:</b>"+ loc_status +
            "\nlon:" + loc.longitude +
            "\nlat:" + loc.latitude +
            "\nalt:" + loc.altitude;
        if (Show["rads"])
        {
            status_txt += "\n<b>rads:</b>";
            foreach (KeyValuePair<string, radar_plain> entry in rads)
            {
                status_txt += "\n " + entry.Key + ":" + entry.Value.StatusDisplay();
            }
        }            
        transform.GetChild(0).GetChild(0).GetComponent<Text>().text = status_txt;

        // pc mocks
#if UNITY_EDITOR
        if (Input.GetKeyUp(KeyCode.Space))
        {
            MockLoc_i = (MockLoc_i + 1) % MockLocs.Length;
            var st = ListNearestStations(MockLoc(MockLocs[MockLoc_i]));
            foreach (string station in st)
            {
                rads.Add(station, Instantiate<radar_plain>(r_prefab));
                rads[station].transform.name = station;
                rads[station].LoadRadarData(station);
                rads[station].SetGps(MockLoc(MockLocs[MockLoc_i]));
                rads[station].MockWH(new Vector2Int(600, 550));
            }

        }
#endif

    }
}